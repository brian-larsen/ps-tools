<#
.SYNOPSIS
  Displays a graphical interface for formatting Microsoft Teams chat transcripts.
.DESCRIPTION
  Format-TeamsChat function displays a Windows form consisting of the elements defined in the json file (FormatTeamsChat.json).
  The function takes no arguments, but the formatting logic takes as input unformatted transcript text copied from
  a Microsoft Teams conversation and applies formatting rules.
  REsults are displayed inside the form and can be exported to a file.

  This tool takes as input the text transcript of a Teams conversation and formats it to a more reader-friendly version.
  Currently, copying the content of a chat in Teams results in one of two scenarios:
    1. A large amount of metadata is gathered, causing messages to appear redundant and the transcript to be confusing.
    2. No metadata is collected at all, making it impossible to attribute messages outside of assumption through context.

  The following formatting is performed:
    - Summary lines about each message ("<first several characters of the message> by <last name>, <first name> (Department)") are removed.
    - Redundant lines showing the number of reactions for each reaction type are removed.
    - Lines generated by the Teams app which are irrelevant to the conversation are removed.
        E.g.  "Last read" : indicating the last message in the chat that was read by the user
              "Has context menu" : UI menu for quick response message buttons
    - Newline characters are condensed
    - A newline is inserted before each new message for readability

.NOTES
  Since there is generally no data collected when copying images, most often it appears simply as a blank line in the transcript after formatting,
  though the newline character is occasionally omitted leaving only the name of the user and time of the message.
#>
function Format-TeamsChat {
  [CmdletBinding()]
  param()


  # ===== TOP =====
  $FormJson = $PSCommandPath.Replace(".ps1", ".json")
  $NewForm, $FormElements = Set-FormFromJson $FormJson

  # ===== CUSTOM ELEMENTS =====

  # Clear content from the Input box
  $FormElements.button_ClearInput.Add_Click({
      $FormElements.textbox_Input.Text = ""
      Write-Host "Input text deleted."
    })

  # Optionall upload an existing transcript file.
  $FormElements.button_ImportFile.Add_Click({
    $transcriptFile = Get-TranscriptFile
    if ([string]::IsNullOrEmpty($transcriptFile))
    { Write-Warning "No file selected"}
    else {
      $FormElements.textbox_Input.Text = @(Get-Content -Path $transcriptFile -Raw)
      Write-Host "Input file loaded."
    }
  })

  # Format the text in the input box and place the result in the output box
  $FormElements.button_FormatText.Add_Click({
      $content = $FormElements.textbox_Input.Text
      [regex]$byLine = ".{1,47} by (\b[\w-]+\b *)+, (\b[\w-]+\b *)+\(\b[\w+ -_&]+\)"
      [regex]$reactionCount = "(?<=\d+ [\w\s]+ reaction[s]?\.)[\r|\n]+\d+"
      [regex]$lastRead = "Last read[\r|\n]+"
      [regex]$contextMenu = "[Hh]as context menu\.?"
      [regex]$newComment = "((Yesterday|\d{1,2}/\d{1,2}| )*\d{1,2}:\d{1,2} [AM|PM]{2})?[\r|\n]*(\b[\w-]+\b *)+, (\b[\w-]+\b *)+\(\b[\w+ -_&]+\)[\r|\n]*((Yesterday|\d{1,2}/\d{1,2}| )*\d{1,2}:\d{1,2} [AM|PM]{2})?"
      [regex]$condenseBlankLines = "(\r*\n){3,}"
      [regex]$newLine = "(?<!\r)\n"

      # Ensure carriage returns precede each line feed character for proper formatting in C# text box.
      $content = $content -replace $newLine, "`r`n"

      # Format the chat transcript by editing content that matches the regular expressions defined above.
      $null = Switch -regex ($content) {
        # Remove all preview lines containing "by <userLast>, [<userFirst>] (<Department>)".
        $byLine { $content = $content -replace $byLine, "" }
    
        # Remove redundant digit following reaction indicators.
        $reactionCount { $content = $content -replace $reactionCount, "" }
    
        # Remove line that says "Last read" if it exists. It simply indicates the last line of the chat that was read by the signed-in Teams user.
        $lastRead { $content = $content -replace $lastRead, "" }
    
        # Remove "Has context menu" line
        $contextMenu { $content = $content -replace $contextMenu, "" }
    
        default { $_ }
      }

      # Separate new messages by adding a new line above the commenter's name.
      $content = $content -replace $newComment, "`r`n$&"

      # Replace multiple newlines with a single newline character.
      # Also remove blank lines at the beginning and end of the file.
      $content = ($content -replace $condenseBlankLines, "`r`n`r`n").Trim()

      # Insert the formatted text into the output box.
      $FormElements.textbox_Output.Text = $content
      Write-Host "Text formatted."
    })


  # Open a save file dialog and select the location and file name.
  # Only text files are allowed.
  $FormElements.button_OutputFile.Add_Click({
      $content = $FormElements.textbox_Output.Text
      $outputFile = New-Object System.Windows.Forms.SaveFileDialog
      $outputFile.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"
      $outputFile.Title = "Save File"

      if ($outputFile.ShowDialog() -eq "OK") {
        $content | Out-File -FilePath $outputFile.FileName -Force
        Write-Host "Saved to file."
      }
    })


  # ===== BOTTOM =====
  $null = $NewForm.ShowDialog()
}
Export-ModuleMember -Function Format-TeamsChat